# This file is autogenerated by maturin v1.8.2
# To update, run
#
#    maturin generate-ci github
#
name: CI

on:
  push:
    branches:
      - lib
    tags:
      - "*"
  pull_request:
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

jobs:
  linux:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        target: [x86_64, i686, aarch64, armv7]
        include:
          - target: x86_64
            arch: amd64
            triple: x86_64-unknown-linux-gnu
            gcc_pkg: gcc-x86_64-linux-gnu
          - target: i686
            arch: i386
            triple: i686-unknown-linux-gnu
            gcc_pkg: gcc-i686-linux-gnu
          - target: aarch64
            arch: arm64
            triple: aarch64-unknown-linux-gnu
            gcc_pkg: gcc-aarch64-linux-gnu
          - target: armv7
            arch: armhf
            triple: armv7-unknown-linux-gnueabihf
            gcc_pkg: gcc-arm-linux-gnueabihf
    steps:
      - uses: actions/checkout@v4

      - name: Configure multiarch
        run: |
          sudo dpkg --add-architecture ${{ matrix.arch }}
          sudo apt update

      - name: Install cross-compiler
        run: |
          sudo apt install -y \
            libatomic1:${{ matrix.arch }} \
            ${{ matrix.gcc_pkg }} \
            g++-${{ matrix.arch }}-linux-gnu

      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          target: ${{ matrix.triple }}
          override: true
          components: rust-src

      - name: Configure cargo for cross-compile
        run: |
          echo "CARGO_TARGET_$(echo ${{ matrix.triple }} | tr '[:lower:]-' '[:upper:]_')_LINKER=${{ matrix.arch }}-linux-gnu-gcc" >> $GITHUB_ENV
          echo '[target.${{ matrix.triple }}]' >> .cargo/config.toml
          echo 'linker = "${{ matrix.arch }}-linux-gnu-gcc"' >> .cargo/config.toml

      - name: Build with maturin
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.triple }}
          args: --release --out dist --manylinux off
          rust-toolchain: nightly

  musllinux:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: ubuntu-22.04
            target: x86_64
          - runner: ubuntu-22.04
            target: x86
          - runner: ubuntu-22.04
            target: aarch64
          - runner: ubuntu-22.04
            target: armv7
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0
      - name: Update submodules
        run: git submodule update --init --recursive
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
          manylinux: musllinux_1_2
          rust-toolchain: nightly
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-musllinux-${{ matrix.platform.target }}
          path: dist

  windows:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: windows-latest
            target: x64
          - runner: windows-latest
            target: x86
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
          architecture: ${{ matrix.platform.target }}
      - name: Install Rust nightly
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-windows-${{ matrix.platform.target }}
          path: dist

  macos:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: macos-13
            target: x86_64
          - runner: macos-14
            target: aarch64
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - name: Install Rust nightly
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-${{ matrix.platform.target }}
          path: dist

  release:
    name: Release
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch' }}
    needs: [linux, musllinux, windows, macos]
    permissions:
      # Use to sign the release artifacts
      id-token: write
      # Used to upload release artifacts
      contents: write
      # Used to generate artifact attestation
      attestations: write
    steps:
      - uses: actions/download-artifact@v4
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-path: "wheels-*/*"
      - name: Publish to PyPI
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        uses: PyO3/maturin-action@v1
        with:
          command: upload
          args: --non-interactive --skip-existing wheels-*/*
